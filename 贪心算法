其实贪心算法只是一个表面很高大上的词语

如patb1020中，求月饼销售最大利润，其解法就是将利润最高的月饼优先进行售卖，知道市场容量填满为止
而patb1023中，进行数字排序也是一样的做法，先把最小的数先输出，最后组成最小的数
因为基础贪心算法其实就是我们日常局部最优解转化为全局最优解的想法，所以不进行多方面阐述

接下来将着重介绍区间贪心
问题1：区间不相交问题，给出n个开区间，求不相交的区间个数
    -----        1
  ----------     2
  如上图，1包含于2之中，所以如果选择1，可以换取更大的空间去容纳其他空间
  而当包含关系排除时
             -------      1
       ---------          2
   --------               3
   ----------             4
--------                  5
将不同区间的x进行从大到小排序，而当x相等时，y 从小到大排序
所以在做算法时总是选择x最大的数值开始
#include<iostream>
#include<algorithm>
using namespace std;
const int maxn=11;
struct Point
{
	int x,y;
}point[maxn];
bool cmp(Point a,Point b)
{
	if(a.x!=b.x) return a.x>b.x;
	else return a.y<b.y;
}
int main()
{
	int n;
	cin>>n;
	for(int i=0;i<n;i++)
	{
		cin>>point[i].x>>point[i].y;
	}
	sort(point,point+n,cmp);
	int ans=1,last=point[0].x;//last记录上一个被选中区间的x坐标 
	for(int i=1;i<n;i++)
	{
		if(point[i].y<=last)
		{
			last=point[i].x;
			ans++;	
		}
		
	}
	cout<<ans;
}

而当问题更换为求n个闭区间中最少需要几个点才能使每个闭区间都至少存在一个点
只要把上述代码中point[i].y<=last改为point[i].y<last,至于为什么，可以自己想想，主要是开闭区间的变化
