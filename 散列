散列：将一个元素通过hash函数转换为整数，使得一个整数唯一代表这个元素
其中，简单说法如下：
当给出N个整数，然后再给出m个整数，看看m个整数是否在n个整数中出现
写法如下：
#include<stdio.h>
const int maxn=100010;
bool hashTable[maxn]={false};
int main()
{
	int n,m,x;
	scanf("%d%d",&n,&m);
	for(int i=0;i<n;i++)
	{
		scanf("%d",&x);
		hashTable[x]=true;
	} 
	for(int i=0;i<m;i++)
	{
		scanf("%d",&x);
		if(hashTable[x])
		{
			printf("YES\n");
		}
		else printf("NO\n");
	}
	return 0;
}
当需要统计个数时，将bool 改为int，记录数据


当key为整数是，即整数散列，而其中散列函数主要有直接定址法，除留余数法
直接定址法即为：H（key）=key
除留余数法即为：H（key）=key%mod,通过这个方法将很大的数转换为不超过mod的整数，一般Tsize和mod取相等，且为素数

但key为字符串时，利用52进制转换法，将字符串转换为整数
其中二十六进制为基础想法
具体如下：
int hash(char S[],int len)
{
	int id=0;
	for(int i=0;i<len;i++)
	{
		id=id*26+(S[i]-'A');
	}
	return id;
}
而同理可得小写字母进制转化，最后得到全字符串，代码如下：
int hash(char S[],int len)
{
	int id=0;
	for(int i=0;i<len;i++)
	{
    if(S[i]>='A'&&S[i]<='Z')
		id=id*52+(S[i]-'A');
    else if(S[i]>='a'&&S[i]<='z')
    id=id*52+(S[i]-'a')+26;
	}
	return id;
}

而当出现数字情况时
1.将进制扩大为62，方法同上
2.确定字符串的末尾是确定个数的数字时，先将字符串进行转化，令说的结果为id，而后id=id*10+(S[末尾]-'0')
即如BCD4，将BCD转为731，而后加上4，即7314

当给出N个字符串，然后再给出m个字符串，看看m个字符串是否在n个字符串中出现的次数
写法如下：
#include<iostream>
#include<string.h>
using namespace std;
const int maxn=100;
const int length=5;
char S[maxn][length],temp[length];
int hashTable[52*52*52*52*52+10]={0};
int hashFun(char S[])
{
	int id=0;
	int len=strlen(S);
	cout<<len<<endl;
	for(int i=0;i<len;i++)
	{
    if(S[i]>='A'&&S[i]<='Z')
		id=id*52+(S[i]-'A');
    else if(S[i]>='a'&&S[i]<='z')
    id=id*52+(S[i]-'a')+26;
	}
	cout<<id<<endl;
	return id;
}
int main()
{

	int n,m;
	cin>>n>>m;
	for(int i=0;i<n;i++)
	{
		cin>>S[i];
		int id=hashFun(S[i]);
		hashTable[id]++;	
	}
	for(int i=0;i<m;i++)
	{
		cin>>temp;
		cout<<hashTable[hashFun(temp)]<<endl;;
		 
	}
	return 0;
}

其中散列的想法在map函数的用法中得到体现，即映射，类似于Python语言中的字典数据类型
前提：
#include<map>
using namespace std;

其中map的定义：
map<typename1,typename2>mp;
其中typename1为key，typename2为value，其中当从字符串到整型的映射表示为：
map<string,int>mp;

而其中对map容器内元素的访问为：
1.下标访问
如mp['c']=20;
2.通过迭代器进行访问：
map<typename1,typename2>::iterator it;
其中it为map的迭代器
而通过it->first,it->second就可分别访问key和value
实例如下：
#include<map>
#include<iostream>
using namespace std;
int main()
{
	map<char,int>mp;
	mp['n']=10;
	mp['m']=20;
	for(map<char,int>::iterator it=mp.begin();it!=mp.end();it++)
	{
		cout<<it->first<<" "<<it->second<<endl;
	}
	return 0;
}
其中，map会以key从小到大自动排序

map中主要常用函数：

find（KEY）：返回key=KEY的映射的迭代器
#include<map>
#include<iostream>
using namespace std;
int main()
{
	map<char,int>mp;
	mp['n']=10;
	mp['m']=20;
	map<char,int>::iterator it=mp.find('m');
		cout<<it->first<<" "<<it->second<<endl;
	return 0;
}

erase()：a.删除单个元素 b.删除一个区间内的所有元素
a.
1.mp.erase(it),it为迭代器
#include<map>
#include<iostream>
using namespace std;
int main()
{
	map<char,int>mp;
	mp['n']=10;
	mp['m']=20;
	map<char,int>::iterator it=mp.find('m');
	mp.erase(it);
	for(map<char,int>::iterator it=mp.begin();it!=mp.end();it++)
	{
		cout<<it->first<<" "<<it->second<<endl;
	}
	return 0;
}
2.mp.erase（key）key为要删除的key
#include<map>
#include<iostream>
using namespace std;
int main()
{
	map<char,int>mp;
	mp['n']=10;
	mp['m']=20;
	mp.erase('m');
	for(map<char,int>::iterator it=mp.begin();it!=mp.end();it++)
	{
		cout<<it->first<<" "<<it->second<<endl;
	}
	return 0;
}

b.删除一个区间的元素
mp.erase(first,last),其中数据为左闭右开，其中first为起始的迭代器，而last为下一个地址
#include<map>
#include<iostream>
using namespace std;
int main()
{
	map<char,int>mp;
	mp['n']=10;
	mp['m']=20;
	mp['a']=30;
	map<char,int>::iterator it =mp.find('m');
	mp.erase(it,mp.end());
	for(map<char,int>::iterator it=mp.begin();it!=mp.end();it++)
	{
		cout<<it->first<<" "<<it->second<<endl;
	}
	return 0;
}

size（）函数：返回map中映射的对数，用法cout<<mp.size();

clear()函数，清空map中的所有元素，用法mp.clear();

map的用途:
1.建立字符或字符串与整数之间的映射问题，用map，即上文说到的散列
2.判断打证书或其他数据类型是否存在，map可以当bool使用
延伸，map是一对一，而想实现一对多，可以通过multimap实现，而同时unordered_map也值得我们了解
这里笔记就不多再涉及，遇到题目的时候再进行补充  
to be continue!
