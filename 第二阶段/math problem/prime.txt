素数求解方法
快速方法直接用for循环进行遍历
技巧是：将遍历范围缩小为2到sqrt（n）
究其原因，可以直接试着推导一下
#include<math.h>
#include<iostream>
using namespace std;
int n;
int sqr=sqrt(1.0*n);//这里之所以要多写一步，是因为在math库中，sqrt的参数要求是double，所以不能直接上整型数据
bool IsPrime()
{
	for(int i=2;i<=sqr;i++)
	{
		if(n%i==0)return false;
	}
	return true;
} 

但是以上方法对于数据较大的情况有不可解决的问题，所以，通用方法是建立素数表，有一种打表的思想
#include<math.h>
#include<iostream>
using namespace std;
const int maxn=101;//表长，这里的前提是求1-100的素数
bool IsPrime(int n)
{	
	if(n<=1)return false;
	int sqr=sqrt(1.0*n);//这里之所以要多写一步，是因为在math库中，sqrt的参数要求是double，所以不能直接上整型数据
	for(int i=2;i<=sqr;i++)
	{
		if(n%i==0)return false;
	}
	return true;
} 
int prime[maxn]={0},pnum=0;//以上参数分别存储素数和素数数量 
bool p[maxn]={0};// 该数组用于记录该数是否是质数
void Find_prime() 
{
	for(int i=2;i<=maxn;i++)
	{
		if(IsPrime(i))
		prime[pnum++]=i;
		p[i]=true;
	}
}
int main()
{
	Find_prime();
	for(int i=0;i<pnum;i++)
	{
		cout<<prime[i]<<endl;
	}
}

这个素数表有两种用处
1.可以快速判断该素数是否是素数
2.可以快速输出1-n的所有素数
但以上方法对数据数量达到10的5次以上的数据还是不具有较好的解决能力

因此推出更好的方法，素数筛法
针对素数筛法有很多算法，其中 这里将介绍的是埃氏筛法
算法将从小到大枚举所有数，对每个素数，筛去它的倍数，，剩下的就全是素数
例子：求1-15中的所有素数
1.2是素数，这是公理，因此筛去2的所有倍数，即，4,6,8,10,12,14
2.因为3没有在之前的的步骤中筛去，所以3是素数，因此，筛去3的所有倍数，即6,9,12,15
3.因为4在之前已被筛去，故不作处理
4.因为5没有用在之前的步骤中筛去，所以5是素数，因此筛去5的所有倍数，即10,15
5.因为6在之前已被筛去，故不作处理
6.因为7没有在之前的步骤中筛去，所以7是素数，因此筛去7的所有倍数，即14
7.因为8,9,10,都已被筛去，故不做处理
8.因为11没有被筛去，所以11是素数，因此筛去11的所有倍数
9.12,14,15，都已被筛去
10.13没有被筛去，因此13为素数
以上是素数筛法的一个例子
代码写法
#include<iostream>
using namespace std;
const int maxn=101;
int prime[maxn]={0},pnum=0;
bool p[maxn]={0};
void Find_prime()
{
	for(int i=2;i<maxn;i++)
	{
		if(p[i]==false)
		{
			prime[pnum++]=i;
			for(int j=i+i;j<maxn;j+=i)//用加法代替倍数 
			{
				p[j]=true;
			}
		}
	}
}
int main()
{
	Find_prime();
	for(int i=0;i<pnum;i++)
	{
		cout<<prime[i]<<endl;
	}
	return 0;
}

PAT (Basic Level) Practice （中文）
公告
原PAT网站用户可在 https://patest.cn/bind_old_pat_user 页面绑定至拼题A账号。绑定后，原PAT网站的提交将被合并至拼题A网站用户的对应题目集中。
返回
1013 数素数 (20分)
令 P​i​​  表示第 i 个素数。现任给两个正整数 M≤N≤10​4​​ ，请输出 P​M​​  到 P​N​​  的所有素数。

输入格式：
输入在一行中给出 M 和 N，其间以空格分隔。

输出格式：
输出从 P​M​​  到 P​N​​  的所有素数，每 10 个数字占 1 行，其间以空格分隔，但行末不得有多余空格。

输入样例：
5 27

      
    
输出样例：
11 13 17 19 23 29 31 37 41 43
47 53 59 61 67 71 73 79 83 89
97 101 103
