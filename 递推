通过寻找递推关系，降低时间复杂度

字符串 APPAPT 中包含了两个单词 PAT，其中第一个 PAT 是第 2 位(P)，第 4 位(A)，第 6 位(T)；第二个 PAT 是第 3 位(P)，第 4 位(A)，第 6 位(T)。
现给定字符串，问一共可以形成多少个 PAT？
输入格式：
输入只有一行，包含一个字符串，长度不超过100000 ，只包含 P、A、T 三种字母。
输出格式：
在一行中输出给定字符串中包含多少个 PAT。由于结果可能比较大，只输出对 1000000007 取余数的结果。
输入样例：
APPAPT  
输出样例：
2

此题的递推关系为，寻找一个A的位置，然后将A左侧的P个数*A右侧的T个数，并通过遍历字符串的方式，提前记录A左侧P的个数
#include<stdio.h>
#include<string.h>
#include<iostream>
using namespace std;
const int maxn=100010;
const int mod=1000000007;
char str[maxn];
int leftNumP[maxn]={0};
int main()
{
	gets(str);//这是pat的一道题，但目前pat已经放弃了gets函数，所以用cin.getline(str,maxn);代替
	int len=strlen(str);
	for(int i=0;i<len;i++)
	{
		if(i>0)
		{
			leftNumP[i]=leftNumP[i-1];
		}
		if(str[i]=='P')
		leftNumP[i]++;
	}
	int ans,rightNumT=0;
	for(int i=len-1;i>=0;i--)
	{
		if(str[i]=='T')
		rightNumT++;
		if(str[i]=='A')
		{
			ans=(ans+rightNumT*leftNumP[i])%mod;
		}
	}
	cout<<ans;
	return 0;
} 
